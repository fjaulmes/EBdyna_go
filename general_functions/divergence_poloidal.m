function div=divergence_poloidal(m,d)
%%divergence_poloidal Determines the divergence in poloidal field
% If with no output arguments, this function also makes a subplot
% comparison of the divergence to show the improvement in maps. Make sure
% the folder names are correct.

global par maps dim
par.div_order=8;

if isempty(maps)
%% NO INPUT SETTINGS
if nargin~=0
    maps=m;
    dim=d;
elseif isempty(maps) || isempty(dim)
    warning('loading data from data_tokamak folder')
    % Path names
    par.paths=initialize_folder_names_struct();
    % Recalculate maps/ load data
    filename=strcat(par.paths.DATA_FOLDER,'XZsmall_fields_tokamak_pre_collapse.mat');
    % Recalculate maps
    if ~exist(filename, 'file');
        warning('Are you in an ''execution'' folder?')
        error('Comment this error out to create new maps from FINESSE data')
        calculate_pre_collapse_drift_speed_maps(par);
    end
    par.step.R=1;
    par.step.Z=1;
    par.step.phi=1;
    % 3D field
    par.coord_syst='toroidal';
    par.APPLY_RMP     =false;                  % Resonant Magnetic Perturbations (RMP)
    if par.APPLY_RMP
        par.RMP_file        =['../data_tokamak/','RMP_n=2_even_',par.coord_syst,'_2016-09-16.mat'];
    end
    par.APPLY_TFR           =true;                 % Toroidal Field Ripple
    if par.APPLY_TFR
        par.TFR_file        =['../data_tokamak/','TFR_',par.coord_syst,'_2016-09-20.mat'];
    end
    if par.APPLY_RMP || par.APPLY_TFR
        par.APPLY_3D=true;
    else
        par.APPLY_3D=false;
    end
    
    par.CALCULATE_PPHI_3D   =false...               % Determine pphi based on addition of (local) evolution
        & (par.APPLY_3D);
    
    % Load maps
    par.mode=1; par.interp_scheme=3; par.scheme='BORIS'; 
    [maps,dim]=initialize_maps(true,false);
	
    % Substract 2D field for 3D only
    if par.APPLY_3D
    for i=1:3
        maps.B_3D(:,:,:,i)=bsxfun(@minus,maps.B_3D(:,:,:,i),maps.B_2D(:,:,i));
    end
    end
end
end
%% Main plot routine
type_plot='3D';

switch type_plot
    case '2D'
        div=divergence_2D(nargout~=0);
    case '3D'
        div=divergence_3D(nargout~=0);
end

if nargout==0; div=[]; end;
end

function div=divergence_2D(only_calc)
global par maps dim spacing_logical_X spacing_logical_Z 
%% MAIN DETERMINATION OF DIVERGENCE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
[dBR_dR,dBZ_dZ]=get_div_2D(dim,maps);

dBR_dR    =dBR_dR*dim.DX_inv;
dBZ_dZ    =dBZ_dZ*dim.DZ_inv;
BR_over_R=bsxfun(@times,1./(dim.scale_X(spacing_logical_X)+dim.R0)',maps.B_2D(spacing_logical_X,spacing_logical_Z,1));

%% MAIN CALCULATION
div=dBR_dR+BR_over_R+dBZ_dZ;

if only_calc; return; end;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% PLOTTING
%% CURRENT MAP
% make figure
delete(findall(0,'type','figure','tag','div_2D'))
hf=figure('tag','div_2D','units','normalized','outerposition',[0 0 1 1]);
%ha_text=axes('position',[0.42 0.8 0.2 0.2],'visible','off','parent',hf);
%text(0.25,0.6,'$\nabla\cdot\vec{B}$ [T/m]','parent',ha_text,'FontSize',20)

ha1=subplot(1,3,3,'parent',hf);
hold(ha1,'on');

% contourplot
c=contourc(dim.scale_X(spacing_logical_X)+dim.R0,dim.scale_Z(spacing_logical_Z),maps.psi_norm_XZ(spacing_logical_X,spacing_logical_Z)',[dim.NB_PSI dim.NB_PSI]);
C=real(log10(div))';
% imageplot
imagesc(dim.scale_X(spacing_logical_X)+dim.R0,dim.scale_Z(spacing_logical_Z),C,'parent',ha1);
plot(ha1,c(1,2:end),c(2,2:end),'r','linewidth',2,'displayname','LCFS')

% Titles and cosmetics
    axis(ha1,'equal','xy')
xlabel(ha1,'$R$ [m]')
%ylabel(ha1,'$Z$ [m]')
title(ha1,'current \texttt{data\_folder}','interpreter','latex')

% Colorbar
hb=colorbar('peer',ha1);
%     title(hb,'[T/m]','interpreter','latex')
colormap(ha1,'jet'); caxis(ha1,[-7 -4])

try
    set(ha1,'TickLabelInterpreter','latex')
    set(hb,'TickLabelInterpreter','latex')
catch
end
set(ha1,'Fontsize',20)
set(hb,'Fontsize',20)
%set(hb,'Ticks',[-7 -6 -5]);
%set(hb,'TickLabels',{'$10^{-7}$','$10^{-6}$','$10^{-5}$'})
%set(h,'AlphaData',double(~isnan(C)))
drawnow;

%% LOW RESOLUTION MAP
% Load low resolution map
par.paths.DATA_FOLDER='../data_tokamak_lowres/';
if exist(par.paths.DATA_FOLDER,'file')
    [maps_lr,dim_lr]=initialize_maps(true,false);
else
    return
end
% CALCULATION
[dBR_dR_lr,dBZ_dZ_lr]=get_div_2D(dim_lr,maps_lr);
dBR_dR_lr    =dBR_dR_lr*dim_lr.DX_inv;
dBZ_dZ_lr    =dBZ_dZ_lr*dim_lr.DZ_inv;
BR_over_R_lr=bsxfun(@times,1./(dim_lr.scale_X(spacing_logical_X)+dim_lr.R0)',maps_lr.B_2D(spacing_logical_X,spacing_logical_Z,1));

div_lr=dBR_dR_lr+dBZ_dZ_lr+BR_over_R_lr;
% PLOTTING
ha2=subplot(1,3,1,'parent',hf);
hold(ha2,'on')

% contourplot
c=contourc(dim_lr.scale_X+dim_lr.R0,dim_lr.scale_Z,maps_lr.psi_norm_XZ',[dim_lr.NB_PSI dim_lr.NB_PSI]);
C=real(log10(div_lr))';
% imageplot
imagesc(dim.scale_X(spacing_logical_X)+dim.R0,dim.scale_Z(spacing_logical_Z),C,'parent',ha2);
plot(ha1,c(1,2:end),c(2,2:end),'r','linewidth',2,'displayname','LCFS')

% Title and labels
axis(ha2,'equal')
xlabel(ha2,'$R$ [m]')
ylabel(ha2,'$Z$ [m]')
title(ha2,'low res','interpreter','latex')

% Colorbar
hb2=colorbar('peer',ha2);
colormap(ha2,'jet'); caxis(ha2,[-7 -4])

try
    set(ha2,'TickLabelInterpreter','latex')
    set(hb2,'TickLabelInterpreter','latex')
catch
end

set(ha2,'Fontsize',20)
set(hb2,'Fontsize',20)

%% HIGH RESOLUTION MAP
% Load psi-based map
par.paths.DATA_FOLDER='../data_tokamak_highres/';
if exist(par.paths.DATA_FOLDER,'file')
    [maps_hr,dim_hr]=initialize_maps(true,false);
else
    return
end
% CALCULATION
[dBR_dR_hr,dBZ_dZ_hr]=get_div_2D(dim_hr,maps_hr);
dBR_dR_hr    =dBR_dR_hr*dim_hr.DX_inv;
dBZ_dZ_hr    =dBZ_dZ_hr*dim_hr.DZ_inv;
BR_over_R_hr=bsxfun(@times,1./(dim_hr.scale_X(spacing_logical_X)+dim_hr.R0)',maps_hr.B_2D(spacing_logical_X,spacing_logical_Z,1));

div_hr=dBR_dR_hr+dBZ_dZ_hr+BR_over_R_hr;
% PLOTTING
ha3=subplot(1,3,2,'parent',hf);
hold(ha3,'on')

% contourplot
c=contourc(dim_hr.scale_X+dim_hr.R0,dim_hr.scale_Z,maps_hr.psi_norm_XZ',[dim_hr.NB_PSI dim_hr.NB_PSI]);
C=real(log10(div_hr))';
% imageplot
imagesc(dim.scale_X(spacing_logical_X)+dim.R0,dim.scale_Z(spacing_logical_Z),C,'parent',ha3);
plot(ha3,c(1,2:end),c(2,2:end),'r','linewidth',2,'displayname','LCFS')

% Title and labels
axis(ha3,'equal')
xlabel(ha3,'$R$ [m]')
ylabel(ha3,'$Z$ [m]')
title(ha3,'high res','interpreter','latex')

% Colorbar
hb3=colorbar('peer',ha3);
colormap(ha3,'jet'); caxis(ha3,[-7 -4])

try
    set(ha3,'TickLabelInterpreter','latex')
    set(hb3,'TickLabelInterpreter','latex')
catch
end

set(ha3,'Fontsize',20)
set(hb3,'Fontsize',20)

%% ENDING
linkaxes([ha1,ha2,ha3],'xy')
drawnow;
div=[];

    function [dBR_dR,dBZ_dZ]=get_div_2D(dim,maps)
        spacing_logical_X=false(size(dim.scale_X));
        spacing_logical_Z=false(size(dim.scale_Z));
        switch par.div_order
            case 2
                spacing_logical_X(2:end-1)=true;
                spacing_logical_Z(2:end-1)=true;
                dBR_dR=...
                    -(1/2)*maps.B_2D(1:end-2,spacing_logical_Z,1)...
                    +(1/2)*maps.B_2D(3:end  ,spacing_logical_Z,1);
                
                dBZ_dZ=...
                    -(1/2)*maps.B_2D(spacing_logical_X,1:end-2,2)...
                    +(1/2)*maps.B_2D(spacing_logical_X,3:end  ,2);
                
            case 4
                spacing_logical_X(3:end-2)=true;
                spacing_logical_Z(3:end-2)=true;
                dBR_dR=...
                    +(1/12)*maps.B_2D(1:end-4,spacing_logical_Z,1)...
                    -(2/3 )*maps.B_2D(2:end-3,spacing_logical_Z,1)...
                    +(2/3 )*maps.B_2D(4:end-1,spacing_logical_Z,1)...
                    -(1/12)*maps.B_2D(5:end  ,spacing_logical_Z,1);
                
                dBZ_dZ=...
                    +(1/12)*maps.B_2D(spacing_logical_X,1:end-4,2)...
                    -(2/3 )*maps.B_2D(spacing_logical_X,2:end-3,2)...
                    +(2/3 )*maps.B_2D(spacing_logical_X,4:end-1,2)...
                    -(1/12)*maps.B_2D(spacing_logical_X,5:end  ,2);
                
            case 6
                
                spacing_logical_X(4:end-3)=true;
                spacing_logical_Z(4:end-3)=true;
                dBR_dR=...
                    -(1/60)*maps.B_2D(1:end-6,spacing_logical_Z,1)...
                    +(3/20)*maps.B_2D(2:end-5,spacing_logical_Z,1)...
                    -(0.75)*maps.B_2D(3:end-4,spacing_logical_Z,1)...
                    +(0.75)*maps.B_2D(5:end-2,spacing_logical_Z,1)...
                    -(3/20)*maps.B_2D(6:end-1,spacing_logical_Z,1)...
                    +(1/60)*maps.B_2D(7:end  ,spacing_logical_Z,1);
                
                dBZ_dZ=...
                    -(1/60)*maps.B_2D(spacing_logical_X,1:end-6,2)...
                    +(3/20)*maps.B_2D(spacing_logical_X,2:end-5,2)...
                    -(0.75)*maps.B_2D(spacing_logical_X,3:end-4,2)...
                    +(0.75)*maps.B_2D(spacing_logical_X,5:end-2,2)...
                    -(3/20)*maps.B_2D(spacing_logical_X,6:end-1,2)...
                    +(1/60)*maps.B_2D(spacing_logical_X,7:end  ,2);
            case 8
                
                spacing_logical_X(5:end-4)=true;
                spacing_logical_Z(5:end-4)=true;
                dBR_dR=...
                    +(1/280)*maps.B_2D(1:end-8,spacing_logical_Z,1)...
                    -(4/105)*maps.B_2D(2:end-7,spacing_logical_Z,1)...
                    +(1/5  )*maps.B_2D(3:end-6,spacing_logical_Z,1)...
                    -(4/5  )*maps.B_2D(4:end-5,spacing_logical_Z,1)...
                    +(4/5  )*maps.B_2D(6:end-3,spacing_logical_Z,1)...
                    -(1/5  )*maps.B_2D(7:end-2,spacing_logical_Z,1)...
                    +(4/105)*maps.B_2D(8:end-1,spacing_logical_Z,1)...
                    -(1/280)*maps.B_2D(9:end  ,spacing_logical_Z,1);
                
                dBZ_dZ=...
                    +(1/280)*maps.B_2D(spacing_logical_X,1:end-8,2)...
                    -(4/105)*maps.B_2D(spacing_logical_X,2:end-7,2)...
                    +(1/5  )*maps.B_2D(spacing_logical_X,3:end-6,2)...
                    -(4/5  )*maps.B_2D(spacing_logical_X,4:end-5,2)...
                    +(4/5  )*maps.B_2D(spacing_logical_X,6:end-3,2)...
                    -(1/5  )*maps.B_2D(spacing_logical_X,7:end-2,2)...
                    +(4/105)*maps.B_2D(spacing_logical_X,8:end-1,2)...
                    -(1/280)*maps.B_2D(spacing_logical_X,9:end  ,2);
            otherwise
                error('Higher order not programmed')
        end
    end
end

function div=divergence_3D(only_calc)
global maps par dim  spacing_logical_X spacing_logical_Z
%% MAIN DETERMINATION OF DIVERGENCE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
[dBR_dR,dBZ_dZ,dBphi_dphi]=get_div_3D(dim,maps);

dBR_dR    =dBR_dR*dim.DX_inv;
dBZ_dZ    =dBZ_dZ*dim.DZ_inv;
dBphi_dphi=dBphi_dphi*dim.Dphi_inv;
dBphi_dphi=bsxfun(@times,1./(dim.scale_X(spacing_logical_X)+dim.R0)',dBphi_dphi);
BR_over_R=bsxfun(@times,1./(dim.scale_X(spacing_logical_X)+dim.R0)',maps.B_3D(spacing_logical_X,spacing_logical_Z,:,1));

%% MAIN CALCULATION
div=dBR_dR+BR_over_R+dBZ_dZ+dBphi_dphi;
%B=sqrt(sum(maps(1).B_3D.^2,4));
%div =div ./B(3:end-2,3:end-2,:); clear B;
if only_calc; return; end;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% PLOTTING
%% MID-PLANE
% make figure
delete(findall(0,'type','figure','tag','div_3D'))
hf=figure('tag','div_3D','units','normalized','outerposition',[0 0 1 1]);
%ha_text=axes('position',[0.42 0.8 0.2 0.2],'visible','off','parent',hf);
%text(0.25,0.6,'$\nabla\cdot\vec{B}$ [T/m]','parent',ha_text,'FontSize',20)

ha1=subplot(1,3,1,'parent',hf);
hold(ha1,'on');

% Determine mid-plane finite numbers in full scale and reduced (div is in
% reduced size)
shift=find(~spacing_logical_X(1:dim.mid_Z),1,'last');
mid_Z_new=dim.mid_Z-shift;
X_boundaries=isfinite(div(:,mid_Z_new,1));
X_boundaries_l=[false(shift,1); X_boundaries; false(shift,1)];

R=dim.scale_X(X_boundaries_l)+dim.R0;
phi=linspace(0,2*pi/dim.n3D.symm,dim.n3D.size_3D(3));
% imageplot
imagesc(R,phi,real(log10(squeeze(div(X_boundaries,mid_Z_new,:))))','parent',ha1);
set(ha1,'Xlim',[R(1) R(end)])
set(ha1,'Ylim',[phi(1) phi(end)])

% Titles and cosmetics
%axis(ha1,'equal')
xlabel(ha1,'$R$ [m]')
ylabel(ha1,'$\varphi$')
title(ha1,'Midplane','interpreter','latex')

% Colorbar
%hb=colorbar('peer',ha1);
%     title(hb,'[T/m]','interpreter','latex')
colormap(ha1,'jet'); caxis(ha1,[-7 -4])

try
    set(ha1,'TickLabelInterpreter','latex')
 %   set(hb,'TickLabelInterpreter','latex')
catch
end
set(ha1,'Fontsize',20)
%set(hb,'Fontsize',20)

phi_pos=25;
phi=linspace(0,2*pi,513);
line(get(ha1,'Xlim'),[phi(phi_pos) phi(phi_pos)],'color','r','parent',ha1)
%% Poloidal plane

% make figure
%hf=figure('tag','div_tor');
%ha_text=axes('position',[0.42 0.8 0.2 0.2],'visible','off','parent',hf);
%text(0.25,0.6,'$\nabla\cdot\vec{B}$ [T/m]','parent',ha_text,'FontSize',20)

ha2=subplot(1,3,2,'parent',hf);
hold(ha2,'on');

% Determine mid-plane finite numbers in full scale and reduced (div is in
% reduced size)

R=dim.scale_X(spacing_logical_X)+dim.R0;
Z=dim.scale_Z(spacing_logical_Z);
% imageplot
C=real(log10(squeeze(div(:,:,phi_pos))))';
h=imagesc(R,Z,C,'parent',ha2);
set(ha2,'Xlim',[R(1) R(end)])
set(ha2,'Ylim',[Z(1) Z(end)])
% set(h,'AlphaData',isfinite(get(h,'Cdata')));

% contourplot
c=contourc(dim.scale_X(spacing_logical_X)+dim.R0,dim.scale_Z(spacing_logical_Z),maps.psi_norm_XZ(spacing_logical_X,spacing_logical_Z)',[dim.NB_PSI dim.NB_PSI]);
plot(ha2,c(1,2:end),c(2,2:end),'r','linewidth',2,'displayname','LCFS')


% Titles and cosmetics
axis(ha2,'equal','xy')
xlabel(ha2,'$R$ [m]')
ylabel(ha2,'$Z$ [m]')
title(ha2,'Poloidal plane','interpreter','latex')

% Colorbar
hb=colorbar('peer',ha2);
%     title(hb,'[T/m]','interpreter','latex')
colormap(ha2,jet); caxis(ha2,[-7 -4])
try
    set(ha2,'TickLabelInterpreter','latex')
    set(hb,'TickLabelInterpreter','latex')
catch
end
set(ha2,'Fontsize',20)
set(hb,'Fontsize',20)
%set(h,'AlphaData',double(~isnan(C)))
%set(hb,'Ticks',[-7 -6 -5]);
%set(hb,'TickLabels',{'$10^{-7}$','$10^{-6}$','$10^{-5}$'})


%% ENDING
linkprop([ha1 ha2],{'CLim'});

drawnow;


function [dBR_dR,dBZ_dZ,dBphi_dphi]=get_div_3D(dim,maps)
spacing_logical_X=false(size(dim.scale_X));
spacing_logical_Z=false(size(dim.scale_Z));
switch par.div_order
    case 2
        spacing_logical_X(2:end-1)=true;
        spacing_logical_Z(2:end-1)=true;
        dBR_dR=...
            -(1/2)*maps.B_3D(1:end-2,spacing_logical_Z,:,1)...
            +(1/2)*maps.B_3D(3:end  ,spacing_logical_Z,:,1);
        
        dBZ_dZ=...
            -(1/2)*maps.B_3D(spacing_logical_X,1:end-2,:,2)...
            +(1/2)*maps.B_3D(spacing_logical_X,3:end  ,:,2);
        % Pre-allocate phi-component
        dBphi_dphi = zeros(size(maps.B_3D(spacing_logical_X,spacing_logical_Z,:,3)));
        % Main (bulk)
        dBphi_dphi(:,:,2:end-1)=...
            -(1/2 )*maps.B_3D(spacing_logical_X,spacing_logical_Z,1:end-2,3)...
            +(1/2 )*maps.B_3D(spacing_logical_X,spacing_logical_Z,3:end  ,3);
        % Periodic boundaries -> 1st 2 and last 2 elements also calculateble. Note end and 1 are the same!
        dBphi_dphi(:,:,1)=...
            -(1/2 )*maps.B_3D(spacing_logical_X,spacing_logical_Z,end-1,3)...
            +(1/2 )*maps.B_3D(spacing_logical_X,spacing_logical_Z,2    ,3);
        dBphi_dphi(:,:,end)=dBphi_dphi(:,:,1);
        
    case 4
        spacing_logical_X(3:end-2)=true;
        spacing_logical_Z(3:end-2)=true;
        dBR_dR=...
            +(1/12)*maps.B_3D(1:end-4,spacing_logical_Z,:,1)...
            -(2/3 )*maps.B_3D(2:end-3,spacing_logical_Z,:,1)...
            +(2/3 )*maps.B_3D(4:end-1,spacing_logical_Z,:,1)...
            -(1/12)*maps.B_3D(5:end  ,spacing_logical_Z,:,1);
        
        dBZ_dZ=...
            +(1/12)*maps.B_3D(spacing_logical_X,1:end-4,:,2)...
            -(2/3 )*maps.B_3D(3:end-2,2:end-3,:,2)...
            +(2/3 )*maps.B_3D(3:end-2,4:end-1,:,2)...
            -(1/12)*maps.B_3D(3:end-2,5:end  ,:,2);
        % Pre-allocate phi-component
        dBphi_dphi = zeros(size(maps.B_3D(3:end-2,3:end-2,:,3)));
        % Main (bulk)
        dBphi_dphi(:,:,3:end-2)=...
            +(1/12)*maps.B_3D(3:end-2,3:end-2,1:end-4,3)...
            -(2/3 )*maps.B_3D(3:end-2,3:end-2,2:end-3,3)...
            +(2/3 )*maps.B_3D(3:end-2,3:end-2,4:end-1,3)...
            -(1/12)*maps.B_3D(3:end-2,3:end-2,5:end  ,3);
        % Periodic boundaries -> 1st 2 and last 2 elements also calculateble. Note end and 1 are the same!
        dBphi_dphi(:,:,1)=...
            +(1/12)*maps.B_3D(3:end-2,3:end-2,end-2,3)...
            -(2/3 )*maps.B_3D(3:end-2,3:end-2,end-1,3)...
            +(2/3 )*maps.B_3D(3:end-2,3:end-2,2    ,3)...
            -(1/12)*maps.B_3D(3:end-2,3:end-2,3    ,3);
        dBphi_dphi(:,:,2)=...
            +(1/12)*maps.B_3D(3:end-2,3:end-2,end-1,3)...
            -(2/3 )*maps.B_3D(3:end-2,3:end-2,1    ,3)...
            +(2/3 )*maps.B_3D(3:end-2,3:end-2,3    ,3)...
            -(1/12)*maps.B_3D(3:end-2,3:end-2,4    ,3);
        dBphi_dphi(:,:,end-1)=...
            +(1/12)*maps.B_3D(3:end-2,3:end-2,end-3,3)...
            -(2/3 )*maps.B_3D(3:end-2,3:end-2,end-2,3)...
            +(2/3 )*maps.B_3D(3:end-2,3:end-2,end  ,3)...
            -(1/12)*maps.B_3D(3:end-2,3:end-2,2    ,3);
        dBphi_dphi(:,:,end)=...
            +(1/12)*maps.B_3D(3:end-2,3:end-2,end-2,3)...
            -(2/3 )*maps.B_3D(3:end-2,3:end-2,end-1,3)...
            +(2/3 )*maps.B_3D(3:end-2,3:end-2,2    ,3)...
            -(1/12)*maps.B_3D(3:end-2,3:end-2,3    ,3);
    case 6
        
        spacing_logical_X(4:end-3)=true;
        spacing_logical_Z(4:end-3)=true;
        %% Finite difference derivative from maps (Pascal)
        dBR_dR=...
            -(1/60)*maps.B_3D(1:end-6,4:end-3,:,1)...
            +(3/20)*maps.B_3D(2:end-5,4:end-3,:,1)...
            -(0.75)*maps.B_3D(3:end-4,4:end-3,:,1)...
            +(0.75)*maps.B_3D(5:end-2,4:end-3,:,1)...
            -(3/20)*maps.B_3D(6:end-1,4:end-3,:,1)...
            +(1/60)*maps.B_3D(7:end  ,4:end-3,:,1);
        
        dBZ_dZ=...
            -(1/60)*maps.B_3D(4:end-3,1:end-6,:,2)...
            +(3/20)*maps.B_3D(4:end-3,2:end-5,:,2)...
            -(0.75)*maps.B_3D(4:end-3,3:end-4,:,2)...
            +(0.75)*maps.B_3D(4:end-3,5:end-2,:,2)...
            -(3/20)*maps.B_3D(4:end-3,6:end-1,:,2)...
            +(1/60)*maps.B_3D(4:end-3,7:end  ,:,2);
        % Pre-allocate phi-component
        dBphi_dphi = zeros(size(maps.B_3D(4:end-3,4:end-3,:,3)));
        % Main (bulk)
        dBphi_dphi(:,:,4:end-3)=...
            -(1/60)*maps.B_3D(4:end-3,4:end-3,1:end-6,3)...
            +(3/20)*maps.B_3D(4:end-3,4:end-3,2:end-5,3)...
            -(0.75)*maps.B_3D(4:end-3,4:end-3,3:end-4,3)...
            +(0.75)*maps.B_3D(4:end-3,4:end-3,5:end-2,3)...
            -(3/20)*maps.B_3D(4:end-3,4:end-3,6:end-1,3)...
            +(1/60)*maps.B_3D(4:end-3,4:end-3,7:end  ,3);
        % Periodic boundaries -> 1st 2 and last 2 elements also calculateble. Note end and 1 are the same!
        dBphi_dphi(:,:,1)=...
            -(1/60)*maps.B_3D(4:end-3,4:end-3,end-3  ,3)...
            +(3/20)*maps.B_3D(4:end-3,4:end-3,end-2  ,3)...
            -(0.75)*maps.B_3D(4:end-3,4:end-3,end-1  ,3)...
            +(0.75)*maps.B_3D(4:end-3,4:end-3,2      ,3)...
            -(3/20)*maps.B_3D(4:end-3,4:end-3,3      ,3)...
            +(1/60)*maps.B_3D(4:end-3,4:end-3,4      ,3);
        dBphi_dphi(:,:,2)=...
            -(1/60)*maps.B_3D(4:end-3,4:end-3,end-2  ,3)...
            +(3/20)*maps.B_3D(4:end-3,4:end-3,end-1  ,3)...
            -(0.75)*maps.B_3D(4:end-3,4:end-3,end    ,3)...
            +(0.75)*maps.B_3D(4:end-3,4:end-3,3      ,3)...
            -(3/20)*maps.B_3D(4:end-3,4:end-3,4      ,3)...
            +(1/60)*maps.B_3D(4:end-3,4:end-3,5      ,3);
        dBphi_dphi(:,:,3)=...
            -(1/60)*maps.B_3D(4:end-3,4:end-3,end-1  ,3)...
            +(3/20)*maps.B_3D(4:end-3,4:end-3,end    ,3)...
            -(0.75)*maps.B_3D(4:end-3,4:end-3,2      ,3)...
            +(0.75)*maps.B_3D(4:end-3,4:end-3,4      ,3)...
            -(3/20)*maps.B_3D(4:end-3,4:end-3,5      ,3)...
            +(1/60)*maps.B_3D(4:end-3,4:end-3,6      ,3);
        
        dBphi_dphi(:,:,end-2)=...
            -(1/60)*maps.B_3D(4:end-3,4:end-3,end-5  ,3)...
            +(3/20)*maps.B_3D(4:end-3,4:end-3,end-4  ,3)...
            -(0.75)*maps.B_3D(4:end-3,4:end-3,end-3  ,3)...
            +(0.75)*maps.B_3D(4:end-3,4:end-3,end-1  ,3)...
            -(3/20)*maps.B_3D(4:end-3,4:end-3,1      ,3)...
            +(1/60)*maps.B_3D(4:end-3,4:end-3,2      ,3);
        dBphi_dphi(:,:,end-1)=...
            -(1/60)*maps.B_3D(4:end-3,4:end-3,end-4  ,3)...
            +(3/20)*maps.B_3D(4:end-3,4:end-3,end-3  ,3)...
            -(0.75)*maps.B_3D(4:end-3,4:end-3,end-2  ,3)...
            +(0.75)*maps.B_3D(4:end-3,4:end-3,1      ,3)...
            -(3/20)*maps.B_3D(4:end-3,4:end-3,2      ,3)...
            +(1/60)*maps.B_3D(4:end-3,4:end-3,3      ,3);
        dBphi_dphi(:,:,end)=dBphi_dphi(:,:,1);
        
	   case 8
        spacing_logical_X(5:end-4)=true;
        spacing_logical_Z(5:end-4)=true;
        %% Finite difference derivative from maps (Pascal)
		dBR_dR=...
            +(1/280)*maps.B_3D(1:end-8,spacing_logical_Z,:,1)...
            -(4/105)*maps.B_3D(2:end-7,spacing_logical_Z,:,1)...
            +(1/5  )*maps.B_3D(3:end-6,spacing_logical_Z,:,1)...
            -(4/5  )*maps.B_3D(4:end-5,spacing_logical_Z,:,1)...
            +(4/5  )*maps.B_3D(6:end-3,spacing_logical_Z,:,1)...
            -(1/5  )*maps.B_3D(7:end-2,spacing_logical_Z,:,1)...
            +(4/105)*maps.B_3D(8:end-1,spacing_logical_Z,:,1)...
            -(1/280)*maps.B_3D(9:end  ,spacing_logical_Z,:,1);
        
        dBZ_dZ=...
            +(1/280)*maps.B_3D(spacing_logical_X,1:end-8,:,2)...
            -(4/105)*maps.B_3D(spacing_logical_X,2:end-7,:,2)...
            +(1/5  )*maps.B_3D(spacing_logical_X,3:end-6,:,2)...
            -(4/5  )*maps.B_3D(spacing_logical_X,4:end-5,:,2)...
            +(4/5  )*maps.B_3D(spacing_logical_X,6:end-3,:,2)...
            -(1/5  )*maps.B_3D(spacing_logical_X,7:end-2,:,2)...
            +(4/105)*maps.B_3D(spacing_logical_X,8:end-1,:,2)...
            -(1/280)*maps.B_3D(spacing_logical_X,9:end  ,:,2);
        % Pre-allocate phi-component
        dBphi_dphi = zeros(size(maps.B_3D(5:end-4,5:end-4,:,3)));
        % Main (bulk)
        dBphi_dphi(:,:,5:end-4)=...
            +(1/280)*maps.B_3D(5:end-4,5:end-4,1:end-8,3)...
			-(4/105)*maps.B_3D(5:end-4,5:end-4,2:end-7,3)...
			+(1/5  )*maps.B_3D(5:end-4,5:end-4,3:end-6,3)...
            -(4/5  )*maps.B_3D(5:end-4,5:end-4,4:end-5,3)...
            +(4/5  )*maps.B_3D(5:end-4,5:end-4,6:end-3,3)...
            -(1/5  )*maps.B_3D(5:end-4,5:end-4,7:end-2,3)...
            +(4/105)*maps.B_3D(5:end-4,5:end-4,8:end-1,3)...
            -(1/280)*maps.B_3D(5:end-4,5:end-4,9:end  ,3);
        % Periodic boundaries -> 1st 2 and last 2 elements also calculateble. Note end and 1 are the same!
        dBphi_dphi(:,:,1)=...
            +(1/280)*maps.B_3D(5:end-4,5:end-4,end-4  ,3)...
			-(4/105)*maps.B_3D(5:end-4,5:end-4,end-3  ,3)...
			+(1/5  )*maps.B_3D(5:end-4,5:end-4,end-2  ,3)...
            -(4/5  )*maps.B_3D(5:end-4,5:end-4,end-1  ,3)...
            +(4/5  )*maps.B_3D(5:end-4,5:end-4,2      ,3)...
            -(1/5  )*maps.B_3D(5:end-4,5:end-4,3      ,3)...
            +(4/105)*maps.B_3D(5:end-4,5:end-4,4      ,3)...
            -(1/280)*maps.B_3D(5:end-4,5:end-4,5      ,3);
        dBphi_dphi(:,:,2)=...         
            +(1/280)*maps.B_3D(5:end-4,5:end-4,end-3  ,3)...
			-(4/105)*maps.B_3D(5:end-4,5:end-4,end-2  ,3)...
			+(1/5  )*maps.B_3D(5:end-4,5:end-4,end-1  ,3)...
            -(4/5  )*maps.B_3D(5:end-4,5:end-4,end    ,3)...
            +(4/5  )*maps.B_3D(5:end-4,5:end-4,3      ,3)...
            -(1/5  )*maps.B_3D(5:end-4,5:end-4,4      ,3)...
            +(4/105)*maps.B_3D(5:end-4,5:end-4,5      ,3)...
            -(1/280)*maps.B_3D(5:end-4,5:end-4,6      ,3);
        dBphi_dphi(:,:,3)=...         
            +(1/280)*maps.B_3D(5:end-4,5:end-4,end-2  ,3)...
			-(4/105)*maps.B_3D(5:end-4,5:end-4,end-1  ,3)...
			+(1/5  )*maps.B_3D(5:end-4,5:end-4,end    ,3)...
            -(4/5  )*maps.B_3D(5:end-4,5:end-4,2      ,3)...
            +(4/5  )*maps.B_3D(5:end-4,5:end-4,4      ,3)...
            -(1/5  )*maps.B_3D(5:end-4,5:end-4,5      ,3)...
            +(4/105)*maps.B_3D(5:end-4,5:end-4,6      ,3)...
            -(1/280)*maps.B_3D(5:end-4,5:end-4,7      ,3);
		dBphi_dphi(:,:,4)=...         
            +(1/280)*maps.B_3D(5:end-4,5:end-4,end-1  ,3)...
			-(4/105)*maps.B_3D(5:end-4,5:end-4,end    ,3)...
			+(1/5  )*maps.B_3D(5:end-4,5:end-4,2      ,3)...
            -(4/5  )*maps.B_3D(5:end-4,5:end-4,3      ,3)...
            +(4/5  )*maps.B_3D(5:end-4,5:end-4,5      ,3)...
            -(1/5  )*maps.B_3D(5:end-4,5:end-4,6      ,3)...
            +(4/105)*maps.B_3D(5:end-4,5:end-4,7      ,3)...
            -(1/280)*maps.B_3D(5:end-4,5:end-4,8      ,3);
			
			
        dBphi_dphi(:,:,end-3)=...
            +(1/280)*maps.B_3D(5:end-4,5:end-4,end-7  ,3)...
			-(4/105)*maps.B_3D(5:end-4,5:end-4,end-6  ,3)...
			+(1/5  )*maps.B_3D(5:end-4,5:end-4,end-5  ,3)...
            -(4/5  )*maps.B_3D(5:end-4,5:end-4,end-4  ,3)...
            +(4/5  )*maps.B_3D(5:end-4,5:end-4,end-2  ,3)...
            -(1/5  )*maps.B_3D(5:end-4,5:end-4,end-1  ,3)...
            +(4/105)*maps.B_3D(5:end-4,5:end-4,end    ,3)...
            -(1/280)*maps.B_3D(5:end-4,5:end-4,2      ,3);
		dBphi_dphi(:,:,end-2)=...
            +(1/280)*maps.B_3D(5:end-4,5:end-4,end-6  ,3)...
			-(4/105)*maps.B_3D(5:end-4,5:end-4,end-5  ,3)...
			+(1/5  )*maps.B_3D(5:end-4,5:end-4,end-4  ,3)...
            -(4/5  )*maps.B_3D(5:end-4,5:end-4,end-3  ,3)...
            +(4/5  )*maps.B_3D(5:end-4,5:end-4,end-1  ,3)...
            -(1/5  )*maps.B_3D(5:end-4,5:end-4,end    ,3)...
            +(4/105)*maps.B_3D(5:end-4,5:end-4,2      ,3)...
            -(1/280)*maps.B_3D(5:end-4,5:end-4,3      ,3);
        dBphi_dphi(:,:,end-1)=...
            +(1/280)*maps.B_3D(5:end-4,5:end-4,end-5  ,3)...
			-(4/105)*maps.B_3D(5:end-4,5:end-4,end-4  ,3)...
			+(1/5  )*maps.B_3D(5:end-4,5:end-4,end-3  ,3)...
            -(4/5  )*maps.B_3D(5:end-4,5:end-4,end-2  ,3)...
            +(4/5  )*maps.B_3D(5:end-4,5:end-4,end    ,3)...
            -(1/5  )*maps.B_3D(5:end-4,5:end-4,2      ,3)...
            +(4/105)*maps.B_3D(5:end-4,5:end-4,3      ,3)...
            -(1/280)*maps.B_3D(5:end-4,5:end-4,4      ,3);
        dBphi_dphi(:,:,end)=dBphi_dphi(:,:,1);
        
    otherwise
        error('Higher order not programmed')
end
end
end
